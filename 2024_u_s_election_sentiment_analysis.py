# -*- coding: utf-8 -*-
"""2024 U.S. Election Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WAeHDA422-uZ0zuzXqqE-UKKm43fYV6T
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
data=pd.read_csv("train.csv")

data.head()

data.isnull().sum()

data.describe()

data = data[["tweet_text", "sentiment"]]

data.head()

import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
import joblib

def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'http\S+', '', text)  # Remove URLs
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra spaces
    return text

data["tweet_text"] = data["tweet_text"].apply(preprocess_text)

data.head()

print("Shape of the dataset:", data.shape)
print("\nColumns in the dataset:\n", data.columns)
print("\nMissing values in each column:\n", data.isnull().sum())
print("\nData types of each column:\n", data.dtypes)

print("\nSentiment Distribution:\n", data["sentiment"].value_counts())

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(8, 5))
sns.countplot(x="sentiment", data=data, palette="viridis")
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(data["retweets"], kde=True, color="blue", label="Retweets", bins=10)
sns.histplot(data["likes"], kde=True, color="orange", label="Likes", bins=10)
plt.title("Retweets and Likes Distribution")
plt.xlabel("Count")
plt.ylabel("Frequency")
plt.legend()
plt.show()

X = data["tweet_text"]
y = data["sentiment"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = MultinomialNB()
model.fit(X_train_vec, y_train)

y_pred = model.predict(X_test_vec)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

joblib.dump(model, "sentiment_model.pkl")
joblib.dump(vectorizer, "vectorizer_sentiment.pkl")

def predict_sentiment(text):
    text = preprocess_text(text)
    text_vec = vectorizer.transform([text])
    return model.predict(text_vec)[0]

# Example usage
example_text =input("Enter the text: ")
print("Predicted Sentiment:", predict_sentiment(example_text))